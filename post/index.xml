<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 琳琅世界，观山河</title>
    <link>https://www.xssor2600.site/post/</link>
    <description>Recent content in Posts on 琳琅世界，观山河</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jul 2020 15:57:51 +0800</lastBuildDate>
    
	<atom:link href="https://www.xssor2600.site/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mysql库表数据常用操作整理</title>
      <link>https://www.xssor2600.site/post/mysql%E5%BA%93%E8%A1%A8%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 13 Jul 2020 15:57:51 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/mysql%E5%BA%93%E8%A1%A8%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%95%B4%E7%90%86/</guid>
      <description>在日常mysql使用过程中，通常会涉及到mysql库的迁移，库表数据的同步导入/导出。或者是将一些线上库表数据导出到本地，都会涉及到常见的mysql数据处理流程，那么就需要总结一下常见的mysql针对数据，库表，结构的数据的导入导出方式。
将线上库表数据导出文本 需要先登陆数据库服务器，通过mysql命令指定参数添加sql查询结果导出到当前服务器路径。后面通过sc,zc进行传输。详情参考另外一篇文章:mac使用sz,rz远程传输文件
mysql -h 10.224.40.35 -uuser -p&amp;#39;password&amp;#39; -Ddatabase --default-character-set=utf8 -e&amp;#34;select column1,column2... where payee_logon_id in(&amp;#39;13960225506&amp;#39;,&amp;#39;15905957688&amp;#39;,&amp;#39;15905023789&amp;#39;,&amp;#39;13641490558&amp;#39;,&amp;#39;15260388243&amp;#39;,&amp;#39;17305081757&amp;#39;)&amp;#34; &amp;gt;tt.log  // 另外一种方式 echo &amp;#34;select uid,\`order\`,money,country_code from user_order_record_new_202006 where create_time &amp;gt;= &amp;#39;2020-06-18 00:00:00&amp;#39; and manner_id = 3 and client = 1 and agree =1&amp;#34; | mysql -h xxxxx -uroot -Ddemo -p&amp;#39;123456&amp;#39; --default-character-set=utf8 &amp;gt; /tmp/ios_recharge_18.xls;  // mysqldump -uinke_db_user -h10.100.130.39 -p --default-character-set=utf8 --single-transaction --master-data --where=&amp;#39;type = 1 and money &amp;gt; 1 and money &amp;lt; 9998&amp;#39; inke_payment rule_charge &amp;gt; TableConditon.</description>
    </item>
    
    <item>
      <title>Golang面试题资料</title>
      <link>https://www.xssor2600.site/post/golang%E9%9D%A2%E8%AF%95%E9%A2%98%E8%B5%84%E6%96%99/</link>
      <pubDate>Sun, 12 Jul 2020 00:52:17 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/golang%E9%9D%A2%E8%AF%95%E9%A2%98%E8%B5%84%E6%96%99/</guid>
      <description>长期收集并准备golang工程师面试题相关资料。
面试题与刷题   LeetCode
动态规划（1）最长回文子串	动态规划（2）最长公共子串（子序列）
动态规划（3）动态规划总结分类	动态规划（4）分割等和子集（0,1背包问题）
动态规划（5）lis 最长递增子序列	二叉树的遍历
二叉树的最大路径和	动态规划（6）正则表达式
恢复二叉搜索树	动态规划（7）通配符
回溯法（1）:全排列	螺旋矩阵	前序＋中序／中序＋后序构造二叉树
找出第 k 小	二叉树链表相互转换
滑动窗口（1）	滑动窗口（2）K 个不同整数的子数组	滑动窗口（3）最长湍流子数组
滑动窗口（4）滑动窗口中位数	链表（1）交换旋转
滑动窗口（5）无重复字符的最长子串	滑动窗口（6）替换后的最长重复字符
滑动窗口（7）最小覆盖子串	滑动窗口（8）滑动窗口最大值
链表（1）交换旋转	链表(2) 删除重复元素	链表(3)反转链表	链表(5)环形链表
二叉树（3）二叉树路径和	二叉树（4）右侧指针
  面试每日一题
Go面试每日一题（2）	Go 面试每天一篇（第 3 天）	Go 面试每天一篇（第 4 天）	Go 面试每天一篇（第 5 天）
Go 面试每天一篇（第 6 天）	Go 面试每天一篇（第 7 天）	Go 面试每天一篇（第 8 天）
Go 面试每天一篇（第 9 天）	Go 面试每天一篇（第 10 天）	Go 面试每天一篇（第 11 天）</description>
    </item>
    
    <item>
      <title>Go学习中文网资料归集</title>
      <link>https://www.xssor2600.site/post/go%E5%AD%A6%E4%B9%A0%E4%B8%AD%E6%96%87%E7%BD%91%E8%B5%84%E6%96%99%E5%BD%92%E9%9B%86/</link>
      <pubDate>Sat, 11 Jul 2020 17:43:49 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/go%E5%AD%A6%E4%B9%A0%E4%B8%AD%E6%96%87%E7%BD%91%E8%B5%84%E6%96%99%E5%BD%92%E9%9B%86/</guid>
      <description>为了应对太多的目不暇接，散乱的go学习资料。想把golang学习中文网中的资源进行分类归类，后续按照分类来集中学习，提高学习效率。
&amp;lt;基础内容范围&amp;gt;   [其他基础(Go特性/基础类型)]
Go 中的位运算
Go 的大门已经打开-认识go
Go 语言中的可赋值性
Go 中的等效类型-type
Go 1.11 正式发布：对 Modules 的支持
你所不知道的 Go 语言的一些令人惊叹的优点
For Range 的语义
Golang 中 strings.builder 的 7 个要点
Go 语言之美
Go 语言汇编快速入门
Donng Go 语言的优点，缺点和令人厌恶的设计
Go 语言中的初始化依赖项
Go 语言中的作用域
为什么 Go 类型系统中没可变性
Go 中如何有效的比较字符串
理解 Go 语言的类型
浅析 Go 语言的数字常量
深入理解 fmt 包
图解中文字符编码-Go语言例解
Go 语言中 GOROOT 一定需要设置吗？
Go 创建对象时，如何优雅的传递初始化参数
这个点你有想过吗？Go 语言如何进行类型检查
大神是如何学习 Go 语言之 make 和 new</description>
    </item>
    
    <item>
      <title>redis常用的脚本</title>
      <link>https://www.xssor2600.site/post/common_user_redis_batch_scripts/</link>
      <pubDate>Sat, 04 Jul 2020 13:51:53 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/common_user_redis_batch_scripts/</guid>
      <description>若是想批量启动多个redis服务，或者同时关闭重启多个redis服务，那么通过脚本是最简单的方式。
  Redis批量启动(使用默认配置文件)
#!/bin/bash echo &amp;#34;----- start sentinel redis servers --------&amp;#34; cd /usr/local/redis sudo ./redis-server ./redis.conf sudo ./redis-server ./redis-6378.conf sudo ./redis-server ./redis-6380.conf sudo ./redis-server ./redis-sentinel-26379.conf --sentinel echo &amp;#34;----- sentinel redis servers start successfully! ------&amp;#34;   Redis命令参数化连接
因为配置多个redis实例,每个实例对应不同端口.通过脚本简化redis连接客户端传入的端口参数.
#!/bin/bash echo &amp;#34;---- connection redis client sudo ./redis-cli -p $1------&amp;#34; cd /usr/local/redis # 其中$0 得到命令语句 $1代表命令后的第一个参数 sudo ./redis-cli -p $1 -a x@123456 # 若是每个redis服务密码也不同，则可以使用密码占用符 sudo ./redis-cli -p $1 -a $2 在使用改脚本去连接redis服务器的时候，可以像如下使用：</description>
    </item>
    
    <item>
      <title>Mac_iterm2_rz_use</title>
      <link>https://www.xssor2600.site/post/mac_iterm2_rz_use/</link>
      <pubDate>Sun, 28 Jun 2020 23:15:45 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/mac_iterm2_rz_use/</guid>
      <description>有这样的需求：在跳板机器登陆远程服务器后，需要将mysql数据库数据导出到Excel，并将文件下载到本地。
mysql数据导出Excel 在登陆跳板机，ssh连接上服务器后，常规情况通过mysql命令可以直接连接进入数据库。此时我并不需要进入mysql命令行，而是需要在Linux命令行中通过mysql查询命令直接将数据导出到本地文件。
可以通过mysql -e 命令来完成操作：
echo &amp;quot;select uid,\`order\`,money,country_code from user_order_record_new_202006 where create_time &amp;gt;= &#39;2020-06-18 00:00:00&#39; and manner_id = 3 and client = 1 and agree =1&amp;quot; | mysql -h xxxxx -uroot -Ddemo -p&#39;123456&#39; --default-character-set=utf8 &amp;gt; /tmp/ios_recharge_18.xls; 当通过指定的s q l执行完成后，数据将会写入到Excel中，在目录中生成：
  Excel文件下载到本地 在具体服务器生成查询数据文件时候，这时候如何将文件下载到本地？
主要是通过rz/sz来实现两端服务器文件的传输。
 环境: Mac + iterm2终端: 需要在mac中安装lrzsz插件：  brew install lrzsz  Iterm2配置文件发送send,received脚本命令:
具体脚本参照工程: iterm2-zmodem
在目录/usr/local/bin/目录下分别创建脚本iterm2-send-zmodem.sh，iterm2-recv-zmodem.sh：
 iterm2-send-zmodem.sh  #!/bin/bash # Author: Matt Mastracci (matthew@mastracci.com) # AppleScript from http://stackoverflow.</description>
    </item>
    
    <item>
      <title>golang基础知识梳理</title>
      <link>https://www.xssor2600.site/post/golang%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Fri, 26 Jun 2020 23:05:15 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/golang%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>记录一些刚开始学习go的基础内容。
GO的一些特点：
 并行： go让函数很容易成为非常轻量的线程，这些线程在Go中叫做携程。 安全： 当转换一个类型到另外一个类型，需要显示转换并遵循严格的规则。 快速： 编译很快，执行很快。  常量与变量 const limit = 512 const top uint16 = 1421 const x,y int = 1,3 var a int var b string var c float64 var d [5] int //数组 var e [] int //数组切片 var f * int //正确 var v1 int = 5 //正确 var v2 = 5 //正确，编译器自动推导出V2类型 v3 := 5 //正确，编译器自动推导出V3的类型 基础数据类型 const limit = 512 const top uint16 = 1421 const x,y int = 1,3 var a int var b string var c float64 var d [5] int //数组 var e [] int //数组切片 var f * int //正确 var v1 int = 5 //正确 var v2 = 5 //正确，编译器自动推导出V2类型 v3 := 5 //正确，编译器自动推导出V3的类型  // 两种浮点类型和两种复数类型 float32	±3.</description>
    </item>
    
    <item>
      <title>如何使用hugo来编写文章</title>
      <link>https://www.xssor2600.site/post/how_to_use_hugo/</link>
      <pubDate>Tue, 23 Jun 2020 23:05:15 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/how_to_use_hugo/</guid>
      <description>创建文章  创建一个about页面 创建的about页面会自动生成到content/about.md. 创建第一篇文章，放置post目录下 若是平时想要生成文章，则通过下面命令来创建文章:  hugo new post/new_page_name.md 安装皮肤 在皮肤列表hugo皮肤列表中找到喜欢的主题，并通过git clone到themes目录下，在启动的时候，可以指定名录。
$ cd themes $ git clone https://github.com/spf13/hyde.git 运行hugo 在site的根路径执行hugo启动服务器命令:
hugo server --theme=hyde --buildDrafts // or hugo server -w 在命令行看到启动后，本地可以通过地址http://localhost:1313打开即可。
github部署 首先需要在站点根路径下，通过一下命令来生成静态页面:
hugo --theme=hyde --baseUrl=&amp;quot;https://xssor2600.github.io/&amp;quot; 然后进入public目录，提交代码到GitHub即可
cd public git add -A git commit -m &amp;quot;first commit&amp;quot; git push -u origin master 文章编写  添加标签tag 若是想对文章添加一些标签，那么可以按照如下方式在文章创建开头使用tags属性：  tags: [ &amp;quot;tag1&amp;quot;, &amp;quot;tag2&amp;quot;, &amp;quot;tag3&amp;quot; ] </description>
    </item>
    
  </channel>
</rss>
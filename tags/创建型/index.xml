<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>创建型 on 琳琅世界，观山河</title>
    <link>https://www.xssor2600.site/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B/</link>
    <description>Recent content in 创建型 on 琳琅世界，观山河</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Jul 2020 13:31:35 +0800</lastBuildDate>
    
	<atom:link href="https://www.xssor2600.site/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang设计模式学习_建造者builder</title>
      <link>https://www.xssor2600.site/post/golang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0_%E5%BB%BA%E9%80%A0%E8%80%85builder/</link>
      <pubDate>Sun, 26 Jul 2020 13:31:35 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/golang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0_%E5%BB%BA%E9%80%A0%E8%80%85builder/</guid>
      <description>插一句，如果一个struct类型变量，若是属性都是小写开头的话（private），那么json.Marshal方法是序列化不出来的。(Go的json解析：Marshal与Unmarshal)
建造者模式理念   为什么需要建造者模式？
建造者模式是构造方法的一种替代方案，目的是通过抽象一层工程方法来更规范的构建复杂对象。
什么叫复杂的对象？按照单一职责原则来说，一个对象不能包含太多的职责，也就不能包含太多的属性与行为方法,那么在满足单一职责原则基础上，或者实际应用中由于各种情况，也许程序开发中不能遵守原则，有时候会有负责对象的产生：不少的对象属性与行为方法，其中属性又是其他负责对象，常规构造对象过程过于臃肿，不便于拓展，那么就需要设计模式来重构
核心理念：将复杂对象的表现层与构造过程剥离开来，使相同的构造过程能创建不同的表现层。
对象构建过程，本质就是赋予对象行为逻辑与设置属性的值，那么Builder建造者模式，在应用上来看，是将对象的属性与创建分离，抽象对象创建过程，根据不同场景复用创建过程。
  建造模式有哪些组成？
核心重要的就是两部分：产品实体属性与方法 + 抽象的构建过程
  抽象建造者（builder）：描述具体建造者的公共接口，一般用来定义建造细节的方法，并不涉及具体的对象部件的创建。【可复用】
  产品（Product）：描述一个由一系列部件组成较为复杂的对象。
  具体建造者（ConcreteBuilder）：描述具体建造者，并实现抽象建造者公共接口。
  指挥者（Director）：调用具体建造者来创建复杂对象（产品）的各个部分，并按照一定顺序（流程）来建造复杂对象。
    建造者有哪些应用套路？
  为了分离对象的属性与创建过程
一旦将属性与对象创建过程接耦，那么对象的创建过程就不再强依赖所有的属性，创建过程就能更灵活的，具体建造者就可以根据实际的对象属性组合的创建不同的产品。
  相同的构造流程可以产出不同的表现层
因为对象构建过程是抽象的！那么有相同构建过程的产品，都可以复用改构建过程，从而可以组合创建不同的产品。
    建造者有哪些优势缺点？
  优点：
1、建造者独立，易扩展。 2、便于控制细节风险。
  缺点：
1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。
    建造者实践应用 了解了设计模式建造者模式理念，那么就可以通过高级语言来实践应用。
Go应用   定义建造者最终的产品实体Product(产品都有相同的构建过程)
// 产品1：支付订单Product type Order struct { OrderId string Price Money UserId int64 GoodName string OrderType string // .</description>
    </item>
    
  </channel>
</rss>
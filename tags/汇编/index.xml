<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>汇编 on 琳琅世界，观山河</title>
    <link>https://www.xssor2600.site/tags/%E6%B1%87%E7%BC%96/</link>
    <description>Recent content in 汇编 on 琳琅世界，观山河</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Sep 2020 18:04:48 +0800</lastBuildDate>
    
	<atom:link href="https://www.xssor2600.site/tags/%E6%B1%87%E7%BC%96/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go_汇编学习</title>
      <link>https://www.xssor2600.site/post/go_%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 07 Sep 2020 18:04:48 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/go_%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/</guid>
      <description>Go语言的编译器和汇编器都带了一个-S参数，可以查看生成的最终目标代码。通过对比目标代码和原始的Go语言或Go汇编语言代码的差异可以加深对底层实现的理解。
在学习go源代码和原理过程中，需要结合汇编进行学习，所以必要少不了要熟知基础汇编知识。go也提供了工具可以将源代码中底层汇编指令输出，通过``go tool compile命令用于调用Go语言提供的底层命令工具，其中-S`参数表示输出汇编格式。
package main func main() { _ = add(3,5) } func add(a,b int) int { return a+b } go tool compile -S demo.go命令执行查看源代码的汇编指令。
cotox@cotoxdeMacBook-Pro main % go tool compile -S demo.go &amp;#34;&amp;#34;.main STEXT nosplit size=1 args=0x0 locals=0x0 ..... // add函数底层汇编 &amp;#34;&amp;#34;.add STEXT nosplit size=19 args=0x18 locals=0x0 0x0000 00000 (demo.go:9) TEXT &amp;#34;&amp;#34;.add(SB), NOSPLIT|ABIInternal, $0-24 0x0000 00000 (demo.go:9) PCDATA $0, $-2 0x0000 00000 (demo.go:9) PCDATA $1, $-2 0x0000 00000 (demo.</description>
    </item>
    
  </channel>
</rss>
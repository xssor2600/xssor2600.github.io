<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>slice on 琳琅世界，观山河</title>
    <link>https://www.xssor2600.site/tags/slice/</link>
    <description>Recent content in slice on 琳琅世界，观山河</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Sep 2020 17:01:35 +0800</lastBuildDate>
    
	<atom:link href="https://www.xssor2600.site/tags/slice/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Slice底层学习</title>
      <link>https://www.xssor2600.site/post/slice%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 07 Sep 2020 17:01:35 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/slice%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/</guid>
      <description>slice 翻译成中文就是切片，它和数组（array）很类似，可以用下标的方式进行访问，如果越界，就会产生 panic。但是它比数组更灵活，可以自动地进行扩容。
 type slice struct { array unsafe.Pointer // 指向底层引用数组内存地址指针 	len int // 表示切片可用元素的个数，也就是说使用下标对 slice 的元素进行访问时，下标不能超过 slice 的长度 	cap int //底层数组的元素个数，容量 &amp;gt;= 长度。在底层数组不进行扩容的情况下，容量也是 slice 可以扩张的最大限度。 } 注意，底层数组是可以被多个 slice 同时指向的，因此对一个 slice 的元素进行操作是有可能影响到其他 slice 的。
汇编角度看slice func main() { s:= make([]int,3,10) _=f(s) } func f(s []int) int { return s[1] } 通过命令go tool compile -S demo.go查看生成的汇编源代码
&amp;#34;&amp;#34;.f STEXT nosplit size=60 args=0x20 locals=0x18 // 栈帧大小为24字节，参数和返回值为32字节 (slice类型内存占用24字节)  0x0000 00000 (demo.</description>
    </item>
    
    <item>
      <title>Slice与数组基础比较</title>
      <link>https://www.xssor2600.site/post/slice%E4%B8%8E%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80%E6%AF%94%E8%BE%83/</link>
      <pubDate>Mon, 17 Aug 2020 23:47:36 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/slice%E4%B8%8E%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80%E6%AF%94%E8%BE%83/</guid>
      <description>Array 总的来说，数组是同一类型元素的集合，Go 语言中不允许数组混合不同类型的元素。(当然interface{}除外)
通常情况下，array在声明的时候，就要确定数组个数的大小，并且后面不允许容量发生变化。
  数组的声明与赋值
一个数组的表示形式为 [n]T。n 表示数组中元素的数量，T 代表每个元素的类型。
//数组中的所有元素都被自动赋值为数组类型的零值。 func main() { var a [3]int // int array with length 3  fmt.Println(a) } 数组的赋值可以通过数组下标索引赋值，也可以在声明的时候进行赋值：
func main(){ ia := [3]int{1,2,3} var indexa [3]int indexa[0] = 1 indexa[1] = 2 indexa[2] = 3 }   数组是值类型(对赋值和入参的影响)
  数组是值类型而不是引用类型，意味着当将数组赋值给新变量时候，新变量会得到一个原数组的值拷贝副本，当原数组内容发生变化的时候，并不会影响新变量的值。（或者新变量操作数组内容，并不会影响原数组的内容）
func main(){ ia := [3]int{1,2,3} ib := ia ib[0] = 2 fmt.Println(ia) // [1 2 3]  fmt.Println(ib) // [2 2 3]  a := [3]int{1,2,3} fmt.</description>
    </item>
    
    <item>
      <title>Slice与map基础比较</title>
      <link>https://www.xssor2600.site/post/slice%E4%B8%8Emap%E5%9F%BA%E7%A1%80%E6%AF%94%E8%BE%83/</link>
      <pubDate>Mon, 17 Aug 2020 23:40:41 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/slice%E4%B8%8Emap%E5%9F%BA%E7%A1%80%E6%AF%94%E8%BE%83/</guid>
      <description>Slice 和 Map 是 Go 中的两种重要的数据类型。
Slice Slice是在底层为数组的基础上抽象出来的数据结构，其拥有一个指向数组开始位置的指针，与数组不同的是，slice切片可以动态增长或者收缩，两者都是基于底层的数组重新分配内存。像copy和append这样的函数可以调整底层数组大小。
Map map 是在 Go 中将值（value）与键（key）关联的内置类型。通过相应的键可以获取到值。
  map的创建
通过向 make 函数传入键和值的类型，可以创建 map。语法make(map[type of key]type of value)。
// 例如声明一个map nameMaps := make(map[string]string) // 当没有初始化map的时候，map的零值是nil 特别要注意的是：当仅仅是声明，没有通过make初始化map的时候，map变量的值是nil,若是此时给map赋值，会出现Panic。
AliAppsSafeConfig struct { sync.RWMutex AliAppsConfig map[string]AliAppCommonParams // 声明，没有初始化  } // 若此时直接给map（nil) 赋值，会Panic AliAppsSafeConfig.AliAppsConfig[namespace] = aliPayConf // 正确的做法是，在赋值之前，要通过make进行初始化map func init() { AliAppsSafeConfig.AliAppsConfig = make(map[string]AliAppCommonParams) } 所有可比较的类型都可以作为map的key值。
 Slice, map, and function values are not comparable. However, as a special case, a slice, map, or function value may be compared to the predeclared identifier nil.</description>
    </item>
    
  </channel>
</rss>
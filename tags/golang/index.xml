<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 琳琅世界，观山河</title>
    <link>https://www.xssor2600.site/tags/golang/</link>
    <description>Recent content in golang on 琳琅世界，观山河</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Aug 2020 15:58:45 +0800</lastBuildDate>
    
	<atom:link href="https://www.xssor2600.site/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Make与new</title>
      <link>https://www.xssor2600.site/post/make%E4%B8%8Enew/</link>
      <pubDate>Sun, 02 Aug 2020 15:58:45 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/make%E4%B8%8Enew/</guid>
      <description>make 和 new 在 Go 语言中，make 关键字的主要作用是初始化内置的数据结构，也就是我们在前面提到的 数组和切片、哈希表 和 Channel，而当我们想要获取指向某个类型的指针时其实可以使用 new 关键字.
虽然 make 和 new 都是能够用于初始化数据结构，但是它们两者能够初始化的结构类型却有着较大的不同；make 在 Go 语言中只能用于初始化语言中的基本类型：
slice := make([]int, 0, 100) hashMap := make(map[int]string, 10) ch := make(chan int, 5) 另一个用于初始化数据结构的关键字 new 的作用其实就非常简单了，它只是接收一个类型作为参数然后返回一个指向这个类型的指针：
i := new(int) // 变量i中保存着指向int类型的指针地址0x.... var v int i := &amp;amp;v   new(T) 为每个新的类型T分配一片内存，初始化为 0 并且返回类型为*T的内存地址：这种方法 返回一个指向类型为 T值为 0 的地址的指针，它适用于值类型如数组和结构体；它相当于 &amp;amp;T{}
var p *[]int = new([]int) // *p == nil; with len and cap 0   make(T) 返回一个类型为 T 的初始值，它只适用于3种内建的引用类型：切片、map 和 channel。</description>
    </item>
    
    <item>
      <title>Go学习中文网资料归集</title>
      <link>https://www.xssor2600.site/post/go%E5%AD%A6%E4%B9%A0%E4%B8%AD%E6%96%87%E7%BD%91%E8%B5%84%E6%96%99%E5%BD%92%E9%9B%86/</link>
      <pubDate>Sat, 11 Jul 2020 17:43:49 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/go%E5%AD%A6%E4%B9%A0%E4%B8%AD%E6%96%87%E7%BD%91%E8%B5%84%E6%96%99%E5%BD%92%E9%9B%86/</guid>
      <description>为了应对太多的目不暇接，散乱的go学习资料。想把golang学习中文网中的资源进行分类归类，后续按照分类来集中学习，提高学习效率。
&amp;lt;每日一库&amp;gt;  Go 每日一库之 mapstructure   &amp;lt;基础内容范围&amp;gt;   [其他基础(Go特性/基础类型)]
Go 中的位运算
Go 的大门已经打开-认识go
Go 语言中的可赋值性
Go 中的等效类型-type
Go 1.11 正式发布：对 Modules 的支持
你所不知道的 Go 语言的一些令人惊叹的优点
For Range 的语义
Golang 中 strings.builder 的 7 个要点
Go 语言之美
Go 语言汇编快速入门
Donng Go 语言的优点，缺点和令人厌恶的设计
Go 语言中的初始化依赖项
Go 语言中的作用域
为什么 Go 类型系统中没可变性
Go 中如何有效的比较字符串
理解 Go 语言的类型
浅析 Go 语言的数字常量
深入理解 fmt 包
图解中文字符编码-Go语言例解
Go 语言中 GOROOT 一定需要设置吗？
Go 创建对象时，如何优雅的传递初始化参数
这个点你有想过吗？Go 语言如何进行类型检查</description>
    </item>
    
    <item>
      <title>golang基础知识梳理</title>
      <link>https://www.xssor2600.site/post/golang%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Fri, 26 Jun 2020 23:05:15 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/golang%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>记录一些刚开始学习go的基础内容。
GO的一些特点：
 并行： go让函数很容易成为非常轻量的线程，这些线程在Go中叫做携程。 安全： 当转换一个类型到另外一个类型，需要显示转换并遵循严格的规则。 快速： 编译很快，执行很快。  常量与变量 const limit = 512 const top uint16 = 1421 const x,y int = 1,3 var a int var b string var c float64 var d [5] int //数组 var e [] int //数组切片 var f * int //正确 var v1 int = 5 //正确 var v2 = 5 //正确，编译器自动推导出V2类型 v3 := 5 //正确，编译器自动推导出V3的类型 基础数据类型 const limit = 512 const top uint16 = 1421 const x,y int = 1,3 var a int var b string var c float64 var d [5] int //数组 var e [] int //数组切片 var f * int //正确 var v1 int = 5 //正确 var v2 = 5 //正确，编译器自动推导出V2类型 v3 := 5 //正确，编译器自动推导出V3的类型  // 两种浮点类型和两种复数类型 float32	±3.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pointer on 琳琅世界，观山河</title>
    <link>https://www.xssor2600.site/tags/pointer/</link>
    <description>Recent content in pointer on 琳琅世界，观山河</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Aug 2020 23:17:27 +0800</lastBuildDate>
    
	<atom:link href="https://www.xssor2600.site/tags/pointer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go普通指针类型_unsafe</title>
      <link>https://www.xssor2600.site/post/go%E6%99%AE%E9%80%9A%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B_unsafe_pointer_uintptr%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Wed, 26 Aug 2020 23:17:27 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/go%E6%99%AE%E9%80%9A%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B_unsafe_pointer_uintptr%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</guid>
      <description>在golang的源代码中，经常看到几种指针类型关键字：*,unsafe.Pointer,uintptr。那么这几种指针之间有什么关系，每个指针适用的应用场景又是哪些呢？
Golang指针  *类型：普通指针类型，用于传递对象地址，不能进行指针运算。多数通常应用与开发者和源代码中。 unsafe.Pointer: 通用指针类型，用于转换不同类型指针，不能进行指针运算，不能读取内存存储的值。（指针转换器） uintptr: 用于指针运算，GC不会把uintptr当作指针，uintptr无法持有对象。uintptr类型目标会被GC回收。通常多数都是在源代码中使用。   unsafe.Pointer 是桥梁，可以让任意类型的指针实现相互转换，也可以将任意类型的指针转换为 uintptr 进行指针运算。
 要在某个指针地址上加上一个偏移量，Pointer是不能做这个运算的，那么谁可以呢?
可以做指针运算的只有uintptr，所以需要将Pointer类型转换成uintptr类型，做完加减法后，转换成Pointer，通过*操作，就可以取值，修改值了。
b := (*bmap)(add(h.buckets, (hash&amp;amp;m)*uintptr(t.bucketsize))) k := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize)) //通过uintptr将通用指针p转换成二进制，在于x值进行指针运算，加上偏移量 //最后又通过通过指针将内存地址值转换成指针返回 // Pointer不能指针运算，只能转换成uintptr func add(p unsafe.Pointer, x uintptr) unsafe.Pointer { return unsafe.Pointer(uintptr(p) + x) } unsafe.Pointer 可以让你的变量在不同的普通指针类型转来转去，也就是表示为任意可寻址的指针类型。而 uintptr 常用于与 unsafe.Pointer 打配合，用于做指针运算。
unsafe.Pointer unsafe.Pointer称为通用指针，官方文档对该类型有四个重要描述：
 任何类型的指针都可以被转化为Pointer Pointer可以被转化为任何类型的指针 uintptr可以被转化为Pointer Pointer可以被转化为uintptr  unsafe.Pointer是特别定义的一种指针类型（译注：类似C语言中的void类型的指针），在golang中是用于各种指针相互转换的桥梁，它可以包含任意类型变量的地址。但是不可以直接通过*p来获取unsafe.Pointer指针指向的真实变量的值，因为我们并不知道变量的具体类型。
什么叫 unsafe.Pointer它可以包含任意类型变量的地址？
可以得到一点，就是 unsafe.Pointer 转换的变量，该变量一定要是指针类型，否则编译会报错。
a := 1 b := unsafe.Pointer(a) //报错 b := unsafe.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>同步 on 琳琅世界，观山河</title>
    <link>https://www.xssor2600.site/tags/%E5%90%8C%E6%AD%A5/</link>
    <description>Recent content in 同步 on 琳琅世界，观山河</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Aug 2020 00:03:37 +0800</lastBuildDate>
    
	<atom:link href="https://www.xssor2600.site/tags/%E5%90%8C%E6%AD%A5/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang同步初见</title>
      <link>https://www.xssor2600.site/post/golang%E5%90%8C%E6%AD%A5%E5%88%9D%E8%A7%81/</link>
      <pubDate>Sun, 09 Aug 2020 00:03:37 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/golang%E5%90%8C%E6%AD%A5%E5%88%9D%E8%A7%81/</guid>
      <description>Go语言在设计上对同步（Synchronization，数据同步和线程同步）提供大量的支持，比如 goroutine和channel同步原语，库层面有:
 sync：提供基本的同步原语（比如Mutex、RWMutex、Locker）和 工具类（Once、WaitGroup、Cond、Pool、Map） sync/atomic：提供原子操作（基于硬件指令compare-and-swap）  具体的同步应用场景，和不同应用场景下使用的同步工具也不太相同，参考下图总结：

sync.Once 用法 上述图描述Once适用于懒加载，即为处理只读写一次的数据。通常用于控制变量的初始化，变量的读写遵循单例模式：
通常使用该种形式加载的数据通常不会变化，因为数据常驻内存的。
 当且仅当第一次读某个变量时，进行初始化（写操作） 变量被初始化过程中，所有读都被阻塞（读操作；当变量初始化完成后，读操作继续进行) 变量仅初始化一次，初始化完成后驻留在内存里  golang源代码SDK中在源代码/usr/local/go/src/net/conf.go中，读取系统的网络配置就是懒加载，仅仅单例模式形式读取一次，并将数据保存在内存中：
var ( confOnce sync.Once // guards init of confVal via initConfVal 	confVal = &amp;amp;conf{goos: runtime.GOOS} ) // systemConf returns the machine&amp;#39;s network configuration. func systemConf() *conf { confOnce.Do(initConfVal) return confVal } func initConfVal() { dnsMode, debugLevel := goDebugNetDNS() confVal.dnsDebugLevel = debugLevel .... } 其中，confVal存放系统网络配置数据，confOnce控制读写，其中其处理入参数是一个函数类型。
func (o *Once) Do(f func()) 常用场景包括：</description>
    </item>
    
  </channel>
</rss>
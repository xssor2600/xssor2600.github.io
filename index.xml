<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>琳琅世界，观山河</title>
    <link>https://www.xssor2600.site/</link>
    <description>Recent content on 琳琅世界，观山河</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jun 2020 23:03:25 +0800</lastBuildDate>
    
	<atom:link href="https://www.xssor2600.site/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于职场规划的一点感悟</title>
      <link>https://www.xssor2600.site/minds/work_place_fragment_01/</link>
      <pubDate>Fri, 03 Jul 2020 23:25:02 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/minds/work_place_fragment_01/</guid>
      <description>对于一个职场中，脑子主观总是以技术在手，走遍公司都不怕想法驱动的程序员来说，虽然说对技术的最求，持续的学习，能够持续保持的热情都是难能可贵的，但是我不是那1%的扫地僧，没那能力去争抢那稀缺岗位。所以，需要对自己警示，技术并不是全部。
随着职场工作的业务沉淀和公司平台，同事关系等资源的积累，要学会将自己多路拓展思路，将在技术这座难以翻越的大山遮蔽下的眼界，稍微往左右侧时不时也可以考量和尝试一下。当然了，工作中基本的技术职业素养还是不能够丢弃的，持续向优秀方向努力前进。
在技术学习过程中，重点还是得基础扎实，之后的学习策略思考根据自身条件进行指定和调整，业务也是很重要的一项。所以也是需要时常归纳，总结业务。业务是公司资本赚钱最直接的表现,技术只是实现业务的一种方式而已。

学习困境：
​	虽然每天都在想学习，看起来很努力，但是效果极其有限，今天想学数据库，明天想学云计算，后天又想研究&amp;hellip;.在计算机行业技术更新速度太快，不能捡了芝麻丢西瓜。每种技术都在基本表皮面进行hello world，最终的结果都是不能在一个面进行纵向深入，最后伴随年纪增大，将会在行业内失去竞争力。
A:&amp;quot;如果用5年的时间学习xxx,你能不能成为这个领域的专家？&amp;quot; B：&amp;quot;应该可以吧&amp;quot; C：&amp;quot;你现在25，67，5年后才30左右成为某个领域的专家，为什么不去做呢，看看周围多少30岁的人还一事无成，而那个时候，你已经是xxx领域专家了&amp;quot; 突然让自己警醒，不能再像年轻时候的，一味追求新技术，学习表面技术，消耗太多的时间不能在某个领域沉淀下来，也会让自己内心浮躁，焦虑。那么就可以尝试在某一个小的技术面沉淀，主要的时间都丢入到里面吧。</description>
    </item>
    
    <item>
      <title>关于架构学习的一点思考</title>
      <link>https://www.xssor2600.site/minds/some_thoughts_on_arc_learning/</link>
      <pubDate>Tue, 30 Jun 2020 22:30:31 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/minds/some_thoughts_on_arc_learning/</guid>
      <description>为什么会需要架构？
​ 软件架构设计出来的目的就是为了解决软件工程实践过程中带来的复杂度问题。软件架构引入也会带来新的复杂度，即架构不是银弹,不能解决一切问题。
​ 需要根据实际业务来调整架构，业务驱动架构。
  从上而下
架构设计，分类，模式
先从整体上了解主流架构思想，突破从无到有。即为知道有这么个玩意～
之后学习一些架构实践的各种框架设计就能应用架构思想，从而更容易理解框架功能与核心功能。
  从下而上
学习一门新技术，先从大的架构设计去理解，应用什么模式架构去解决了什么问题。
先从理解框架技术的底层原理，在将框架具体架构设计与应用原理对比分析。
   拓展视野，新增感念 框架技术架构印证 代码实现应用场景 了解设计理念便于理解源码模块  </description>
    </item>
    
    <item>
      <title>Mac_iterm2_rz_use</title>
      <link>https://www.xssor2600.site/post/mac_iterm2_rz_use/</link>
      <pubDate>Sun, 28 Jun 2020 23:15:45 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/mac_iterm2_rz_use/</guid>
      <description>有这样的需求：在跳板机器登陆远程服务器后，需要将mysql数据库数据导出到Excel，并将文件下载到本地。
mysql数据导出Excel 在登陆跳板机，ssh连接上服务器后，常规情况通过mysql命令可以直接连接进入数据库。此时我并不需要进入mysql命令行，而是需要在Linux命令行中通过mysql查询命令直接将数据导出到本地文件。
可以通过mysql -e 命令来完成操作：
echo &amp;quot;select uid,\`order\`,money,country_code from user_order_record_new_202006 where create_time &amp;gt;= &#39;2020-06-18 00:00:00&#39; and manner_id = 3 and client = 1 and agree =1&amp;quot; | mysql -h xxxxx -uroot -Ddemo -p&#39;123456&#39; --default-character-set=utf8 &amp;gt; /tmp/ios_recharge_18.xls; 当通过指定的s q l执行完成后，数据将会写入到Excel中，在目录中生成：
  Excel文件下载到本地 在具体服务器生成查询数据文件时候，这时候如何将文件下载到本地？
主要是通过rz/sz来实现两端服务器文件的传输。
 环境: Mac + iterm2终端: 需要在mac中安装lrzsz插件：  brew install lrzsz  Iterm2配置文件发送send,received脚本命令:
具体脚本参照工程: iterm2-zmodem
在目录/usr/local/bin/目录下分别创建脚本iterm2-send-zmodem.sh，iterm2-recv-zmodem.sh：
 iterm2-send-zmodem.sh  #!/bin/bash # Author: Matt Mastracci (matthew@mastracci.com) # AppleScript from http://stackoverflow.</description>
    </item>
    
    <item>
      <title>Golang基础知识</title>
      <link>https://www.xssor2600.site/post/golang%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Thu, 25 Jun 2020 17:03:19 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/golang%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>常量与变量 const limit = 512 const top uint16 = 1421 const x,y int = 1,3 var a int var b string var c float64 var d [5] int //数组 var e [] int //数组切片 var f * int //正确 var v1 int = 5 //正确 var v2 = 5 //正确，编译器自动推导出V2类型 v3 := 5 //正确，编译器自动推导出V3的类型 基础数据类型 const limit = 512 const top uint16 = 1421 const x,y int = 1,3 var a int var b string var c float64 var d [5] int //数组 var e [] int //数组切片 var f * int //正确 var v1 int = 5 //正确 var v2 = 5 //正确，编译器自动推导出V2类型 v3 := 5 //正确，编译器自动推导出V3的类型 // 两种浮点类型和两种复数类型 float32	±3.</description>
    </item>
    
    <item>
      <title>如何使用hugo来编写文章</title>
      <link>https://www.xssor2600.site/post/how_to_use_hugo/</link>
      <pubDate>Tue, 23 Jun 2020 23:05:15 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/how_to_use_hugo/</guid>
      <description>创建文章  创建一个about页面 创建的about页面会自动生成到content/about.md. 创建第一篇文章，放置post目录下 若是平时想要生成文章，则通过下面命令来创建文章:  hugo new post/new_page_name.md 安装皮肤 在皮肤列表hugo皮肤列表中找到喜欢的主题，并通过git clone到themes目录下，在启动的时候，可以指定名录。
$ cd themes $ git clone https://github.com/spf13/hyde.git 运行hugo 在site的根路径执行hugo启动服务器命令:
hugo server --theme=hyde --buildDrafts // or hugo server -w 在命令行看到启动后，本地可以通过地址http://localhost:1313打开即可。
github部署 首先需要在站点根路径下，通过一下命令来生成静态页面:
hugo --theme=hyde --baseUrl=&amp;quot;https://xssor2600.github.io/&amp;quot; 然后进入public目录，提交代码到GitHub即可
cd public git add -A git commit -m &amp;quot;first commit&amp;quot; git push -u origin master 文章编写  添加标签tag 若是想对文章添加一些标签，那么可以按照如下方式在文章创建开头使用tags属性：  tags: [ &amp;quot;tag1&amp;quot;, &amp;quot;tag2&amp;quot;, &amp;quot;tag3&amp;quot; ] </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.xssor2600.site/about/</link>
      <pubDate>Tue, 23 Jun 2020 23:03:25 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/about/</guid>
      <description>This is me, who is trying to learn more !</description>
    </item>
    
  </channel>
</rss>
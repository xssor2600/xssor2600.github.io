<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>琳琅世界，观山河</title>
    <link>https://www.xssor2600.site/</link>
    <description>Recent content on 琳琅世界，观山河</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jun 2020 23:03:25 +0800</lastBuildDate>
    
	<atom:link href="https://www.xssor2600.site/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Make与new</title>
      <link>https://www.xssor2600.site/post/make%E4%B8%8Enew/</link>
      <pubDate>Sun, 02 Aug 2020 15:58:45 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/make%E4%B8%8Enew/</guid>
      <description>make 和 new 在 Go 语言中，make 关键字的主要作用是初始化内置的数据结构，也就是我们在前面提到的 数组和切片、哈希表 和 Channel，而当我们想要获取指向某个类型的指针时其实可以使用 new 关键字.
虽然 make 和 new 都是能够用于初始化数据结构，但是它们两者能够初始化的结构类型却有着较大的不同；make 在 Go 语言中只能用于初始化语言中的基本类型：
slice := make([]int, 0, 100) hashMap := make(map[int]string, 10) ch := make(chan int, 5) 另一个用于初始化数据结构的关键字 new 的作用其实就非常简单了，它只是接收一个类型作为参数然后返回一个指向这个类型的指针：
i := new(int) // 变量i中保存着指向int类型的指针地址0x.... var v int i := &amp;amp;v   new(T) 为每个新的类型T分配一片内存，初始化为 0 并且返回类型为*T的内存地址：这种方法 返回一个指向类型为 T值为 0 的地址的指针，它适用于值类型如数组和结构体；它相当于 &amp;amp;T{}
var p *[]int = new([]int) // *p == nil; with len and cap 0   make(T) 返回一个类型为 T 的初始值，它只适用于3种内建的引用类型：切片、map 和 channel。</description>
    </item>
    
    <item>
      <title>Goroutine学习初见</title>
      <link>https://www.xssor2600.site/post/goroutine%E5%AD%A6%E4%B9%A0%E5%88%9D%E8%A7%81/</link>
      <pubDate>Sun, 02 Aug 2020 15:23:52 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/goroutine%E5%AD%A6%E4%B9%A0%E5%88%9D%E8%A7%81/</guid>
      <description>Go 编程语言的目的:
 Go 的目的不是研究编程语言设计; 它是为了改善设计师和同事的工作环境。 Go 比编程语言研究更关注软件工程。 或者换句话说，就是为软件工程师服务的语言设计。
 Go 运行时允许您在机器上运行数十万个并发 goroutine 。Goroutine 是一个轻量级的执行线程。 Go 运行时将这些 goroutine 复用到操作系统线程上。 这意味着多个 goroutine 可以在单个操作系统线程上同时运行。
Go 运行时有一个调度程序，其任务是调度这些 goroutine 执行。
 1:初始化时的 Goroutine 具有 2KB 的堆栈。与一个一般为 1 MB 的 OS 线程堆栈相比，这非常小巧。当你需要同时运行几十万个不同的 goroutine 时，这个数字很重要。如果你要并行运行数千个 OS 线程，RAM 显然将成为瓶颈。 2:Go 可以遵循与 Java 等其他语言相同的模型，它支持与 OS 线程相同的线程概念。但是在这种情况下，OS 线程之间的上下文切换成本比不同的 goroutine 之间的上下文切换成本要大得多。
 </description>
    </item>
    
    <item>
      <title>Golang设计模式学习_工厂方法FactoryMethod</title>
      <link>https://www.xssor2600.site/post/golang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0_%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95factorymethod/</link>
      <pubDate>Sun, 26 Jul 2020 23:01:37 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/golang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0_%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95factorymethod/</guid>
      <description>工厂方法模式理论   为什么需要工厂方法模式？
工厂方法模式也是一种创建型模式，产生的目的就是为了“创建对象”。那么为什么需要这种模式来创建对象，创建哪些场景的对象呢？工厂方法模式也是为了适应软件设计开闭原则，依赖倒置原则的，目的就是通过一种工程化方式，设计可拓展的程序。面向接口开发。不需要太多的关注实现细节
 定义一个用于创建对象的接口，让子类绝对实例化哪一个类，工厂方法使一个类的实例化延迟到其子类。 总是引用接口而非实现类，能允许变换子类而不影响调用方，即尽可能面向抽象编程。
 在OOP中，通常都会有抽象的概念，通常在高级语言中，会通过内建的一些关键字进行表达，例如abstrct,interface...,目的就是让开发者通过这些抽象，去设计高可拓展，稳定的程序。
例如在Java中，如果不是面向接口（抽象）去创建产品，那么在对象的创建过程，和对象的使用过程都会有局限性，因为太过于具体而不利于拓展。
// 例如有两个实体 public class ProductA { } public class ProductB { } // 要打印所有的商品 public Class ProductPrinter { // 为了突出目的，不用重写  public void printA(ProductA pa){ } public void printB(ProductB pb){ } // ... public void print(ProductB pb){  //} } // 常规创建对象 public static void main(String[] args) { ProductA a = new ProductA(); ProductB b = new ProductB(); // ProductC c = new ProductC();  ProductPrinter printer = new ProductPrinter(); printer.</description>
    </item>
    
    <item>
      <title>Golang设计模式学习_建造者builder</title>
      <link>https://www.xssor2600.site/post/golang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0_%E5%BB%BA%E9%80%A0%E8%80%85builder/</link>
      <pubDate>Sun, 26 Jul 2020 13:31:35 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/golang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0_%E5%BB%BA%E9%80%A0%E8%80%85builder/</guid>
      <description>插一句，如果一个struct类型变量，若是属性都是小写开头的话（private），那么json.Marshal方法是序列化不出来的。(Go的json解析：Marshal与Unmarshal)
建造者模式理念   为什么需要建造者模式？
建造者模式是构造方法的一种替代方案，目的是通过抽象一层工程方法来更规范的构建复杂对象。
什么叫复杂的对象？按照单一职责原则来说，一个对象不能包含太多的职责，也就不能包含太多的属性与行为方法,那么在满足单一职责原则基础上，或者实际应用中由于各种情况，也许程序开发中不能遵守原则，有时候会有负责对象的产生：不少的对象属性与行为方法，其中属性又是其他负责对象，常规构造对象过程过于臃肿，不便于拓展，那么就需要设计模式来重构
核心理念：将复杂对象的表现层与构造过程剥离开来，使相同的构造过程能创建不同的表现层。
对象构建过程，本质就是赋予对象行为逻辑与设置属性的值，那么Builder建造者模式，在应用上来看，是将对象的属性与创建分离，抽象对象创建过程，根据不同场景复用创建过程。
  建造模式有哪些组成？
核心重要的就是两部分：产品实体属性与方法 + 抽象的构建过程
  抽象建造者（builder）：描述具体建造者的公共接口，一般用来定义建造细节的方法，并不涉及具体的对象部件的创建。【可复用】
  产品（Product）：描述一个由一系列部件组成较为复杂的对象。
  具体建造者（ConcreteBuilder）：描述具体建造者，并实现抽象建造者公共接口。
  指挥者（Director）：调用具体建造者来创建复杂对象（产品）的各个部分，并按照一定顺序（流程）来建造复杂对象。
    建造者有哪些应用套路？
  为了分离对象的属性与创建过程
一旦将属性与对象创建过程接耦，那么对象的创建过程就不再强依赖所有的属性，创建过程就能更灵活的，具体建造者就可以根据实际的对象属性组合的创建不同的产品。
  相同的构造流程可以产出不同的表现层
因为对象构建过程是抽象的！那么有相同构建过程的产品，都可以复用改构建过程，从而可以组合创建不同的产品。
    建造者有哪些优势缺点？
  优点：
1、建造者独立，易扩展。 2、便于控制细节风险。
  缺点：
1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。
    建造者实践应用 了解了设计模式建造者模式理念，那么就可以通过高级语言来实践应用。
Go应用   定义建造者最终的产品实体Product(产品都有相同的构建过程)
// 产品1：支付订单Product type Order struct { OrderId string Price Money UserId int64 GoodName string OrderType string // .</description>
    </item>
    
    <item>
      <title>Golang中context的应用</title>
      <link>https://www.xssor2600.site/post/golang%E4%B8%ADcontext%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Thu, 23 Jul 2020 18:56:43 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/golang%E4%B8%ADcontext%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>动态域名切换</title>
      <link>https://www.xssor2600.site/post/%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E5%88%87%E6%8D%A2/</link>
      <pubDate>Thu, 23 Jul 2020 16:42:42 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E5%88%87%E6%8D%A2/</guid>
      <description>在中台或者其他应用对接开发过程中，如果某条业务线产品运营广告投放行为可能会影响产品线域名是否被封情况，例如经常在社交应用分享一些分销推广很容易就会导致域名被封，那么产品线下通过域名进行网络传输就会被影响，在金融支付容易影响的，就是一些外网渠道交互场景：例如对接某个渠道，例如微信，那么需要配置安全域名，回调地址等等。
对于域名被封情况下，若是金融端对接外部渠道没有主动查单功能，那么就会导致掉单问题，引起大量用户报障投诉。 所以，需要域名动态切换。当然了前提是产品线应用，例如客户端和服务端协商一个域名获取的请求地址，通过外部域名或者内部ip就能解析到的实时域名。（当域名被封后，需要快速替换域名）
域名动态切换  统一域名获取地址 例如客户端和服务端协商通过地址：http://test.dyncroutehostname.com/api/config/get_raw 获取测试环境和线上环境域名地址如下：  { &amp;#34;data&amp;#34;: { &amp;#34;App&amp;#34;: &amp;#34;http://service.dyncroutehostname.com&amp;#34;, &amp;#34;H5&amp;#34;: &amp;#34;https://h5.dyncroutehostname.com&amp;#34;, &amp;#34;TestApp&amp;#34;: &amp;#34;http://test.dyncroutehostname.com&amp;#34;, &amp;#34;TestH5&amp;#34;: &amp;#34;http://testh5.dyncroutehostname.com&amp;#34;, .... }, &amp;#34;dm_error&amp;#34;: 0, &amp;#34;error_msg&amp;#34;: &amp;#34;操作成功&amp;#34;, &amp;#34;status&amp;#34;: &amp;#34;ok&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;1590117188&amp;#34; }  服务器端动态切换  服务器端实现思路： 通过每次实时的通过http调用域名获取地址来得到最新的域名，因为使用场景不是高并发，对实时性要求比较高的场景。同时对域名的实时正确性要求比较高，（因为如果回调域名错误就掉单，当然了渠道也会有延时通知机制）所以可以先不考虑使用redis缓存来缓存域名。
其中，一个域名可以通过CNAME解析到不同机器ip地址上，所以可以咨询产品线的运维获取域名解析到的机器IP，服务器端可以根据ip动态路由地址。
  在配置文件中通过占位符配置统一域名获取地址：
#app_config_url = &amp;#34;http://%s/api/appconfig/get_raw&amp;#34; #app_config_ips = [&amp;#34;10.x.x.19&amp;#34;,&amp;#34;10.x.x.20&amp;#34;,] // 也可以通过内网ip进行替换域名获取,可以配置多个ip #base_host = &amp;#34;https://test.basehostname.com&amp;#34; //配置兜底域名  // 外部渠道回调通知地址 channel_notify_url = &amp;#34;/api/test/notify&amp;#34;   在程序中通过http获取最新域名 目的就是通过地址获取动态域名，然后再拼接上内部具体回调url进行拼接，得到完整的url地址。
  func _getNotifyUrl() string { url := cfgs.</description>
    </item>
    
    <item>
      <title>中台学习</title>
      <link>https://www.xssor2600.site/post/%E4%B8%AD%E5%8F%B0%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sat, 18 Jul 2020 15:46:32 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/%E4%B8%AD%E5%8F%B0%E5%AD%A6%E4%B9%A0/</guid>
      <description>听说”中台“概念是在15年阿里推广出来，虽然现在工作声称要中台化。但是对于什么是中台化也是云里雾里的。
 不要刻意去十分明确的定义什么是“中台”，而是尽量从各家中台中找出自己可以学习借鉴之处。
 中台不是数据公式公里，不需要明确的定义概念。因为这个概念也是由互联网一线大厂推销出来的，每家公司对中台的理解是不同的，但是相同之处都是抽象化，服务于业务。其实最终目的都是服务于业务，而更深层是的还是服务于资本！
 产生背景离不开&amp;quot;资本&amp;rdquo;   任何新的概念产生驱动的原因：
资本要赚钱盈利，当公司的业务架构和产品线达到一个瓶颈的时候，这时候就需要公司相关人员进厂学习参观交流。然后企图在资本交流过程中可以发现一些新的模式，概念，来适当变更当前公司经营模式，要进一步赚更多的钱！例如发现了supercell的游戏高产模式。
所以说，中台概念的出现，最终目的还是为了赚钱来的。（适当在脑海中建立&amp;quot;资本为最终核心&amp;quot;概念）
  ​
  那么企业资本如何赚钱？
无非是两个方面：一是在盈利平缓情况下，减少开销（办公成本，人员薪资成本，软硬件设施成本，产品推广运营成本&amp;hellip;) ； 二是在有资本加持情况下，砸钱改革，快速推出新产品投放市场进行试错&amp;hellip;.
那么如果快速产出业务产品，投放市场进行试错探索？这就需要灵活强大的公司技术，业务架构来支撑。 中台就是这超级APP工场快速产出”资本商品“的重要一环，可以说中台是架构，也可以说中台是战略，都可以说，然后形成目前互联网的中台产品： 支付中台,数据中台,算法中台，搜索中台,用户中台,推荐中台&amp;hellip;.
  中台业务架构 对于中台的概念参照知乎某观点：
 中台是支持多个前台业务且具备业务属性的共性能力组织。
 三点含义：
 中台必须具备业务属性。 中台是一种共性能力组织，支撑多个业务。 中台支持的是多个前台业务。（而不是后台业务）   对于业务中台，什么时候需要中台组织？
 业务系统研发团队人员较多，需求变化快，系统涉及多个领域（外卖，电商，直播，社交)，业务逻辑比较复杂。 业务规模比较大的，中台可以提升软件复用，降低定制化成本，提高研发效率。  支持业务中台的技术体系，包括微服务、DevOps、云原生和分布式事务等。
对于数据中台？
 数据产品比较多，每天要看数据如果没数据就不知道怎么工作的运营人员比较多的业务。比如电商就是典型。尤其是数据产品和运营人员还在多个团队。 用数据的姿势比较复杂，问题比较多，比如经常出现指标不一致、数据出错、想要的数据不知道哪里有等问题  支持数据中台的技术体系，包括指标管理、数据服务、元数据管理、数仓开发与管理、数据安全管理、数据资产管理、大数据计算引擎、数据集成/同步/交换引擎等。
 金融中台 目前工作就是实现灵活的金融中台，在支付，提现等金融行为抽象化组建，服务于多个业务项目线。</description>
    </item>
    
    <item>
      <title>Mysql库表数据常用操作整理</title>
      <link>https://www.xssor2600.site/post/mysql%E5%BA%93%E8%A1%A8%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 13 Jul 2020 15:57:51 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/mysql%E5%BA%93%E8%A1%A8%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%95%B4%E7%90%86/</guid>
      <description>在日常mysql使用过程中，通常会涉及到mysql库的迁移，库表数据的同步导入/导出。或者是将一些线上库表数据导出到本地，都会涉及到常见的mysql数据处理流程，那么就需要总结一下常见的mysql针对数据，库表，结构的数据的导入导出方式。
将线上库表数据导出文本 需要先登陆数据库服务器，通过mysql命令指定参数添加sql查询结果导出到当前服务器路径。后面通过sc,zc进行传输。详情参考另外一篇文章:mac使用sz,rz远程传输文件
mysql -h 10.224.40.35 -uuser -p&amp;#39;password&amp;#39; -Ddatabase --default-character-set=utf8 -e&amp;#34;select column1,column2... where payee_logon_id in(&amp;#39;13960225506&amp;#39;,&amp;#39;15905957688&amp;#39;,&amp;#39;15905023789&amp;#39;,&amp;#39;13641490558&amp;#39;,&amp;#39;15260388243&amp;#39;,&amp;#39;17305081757&amp;#39;)&amp;#34; &amp;gt;tt.log  // 另外一种方式 echo &amp;#34;select uid,\`order\`,money,country_code from user_order_record_new_202006 where create_time &amp;gt;= &amp;#39;2020-06-18 00:00:00&amp;#39; and manner_id = 3 and client = 1 and agree =1&amp;#34; | mysql -h xxxxx -uroot -Ddemo -p&amp;#39;123456&amp;#39; --default-character-set=utf8 &amp;gt; /tmp/ios_recharge_18.xls;  // mysqldump -uinke_db_user -h10.100.130.39 -p --default-character-set=utf8 --single-transaction --master-data --where=&amp;#39;type = 1 and money &amp;gt; 1 and money &amp;lt; 9998&amp;#39; inke_payment rule_charge &amp;gt; TableConditon.</description>
    </item>
    
    <item>
      <title>Golang面试题资料</title>
      <link>https://www.xssor2600.site/post/golang%E9%9D%A2%E8%AF%95%E9%A2%98%E8%B5%84%E6%96%99/</link>
      <pubDate>Sun, 12 Jul 2020 00:52:17 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/golang%E9%9D%A2%E8%AF%95%E9%A2%98%E8%B5%84%E6%96%99/</guid>
      <description>长期收集并准备golang工程师面试题相关资料。
面试题与刷题   LeetCode
动态规划（1）最长回文子串	动态规划（2）最长公共子串（子序列）
动态规划（3）动态规划总结分类	动态规划（4）分割等和子集（0,1背包问题）
动态规划（5）lis 最长递增子序列	二叉树的遍历
二叉树的最大路径和	动态规划（6）正则表达式
恢复二叉搜索树	动态规划（7）通配符
回溯法（1）:全排列	螺旋矩阵	前序＋中序／中序＋后序构造二叉树
找出第 k 小	二叉树链表相互转换
滑动窗口（1）	滑动窗口（2）K 个不同整数的子数组	滑动窗口（3）最长湍流子数组
滑动窗口（4）滑动窗口中位数	链表（1）交换旋转
滑动窗口（5）无重复字符的最长子串	滑动窗口（6）替换后的最长重复字符
滑动窗口（7）最小覆盖子串	滑动窗口（8）滑动窗口最大值
链表（1）交换旋转	链表(2) 删除重复元素	链表(3)反转链表	链表(5)环形链表
二叉树（3）二叉树路径和	二叉树（4）右侧指针
  面试每日一题
Go面试每日一题（2）	Go 面试每天一篇（第 3 天）	Go 面试每天一篇（第 4 天）	Go 面试每天一篇（第 5 天）
Go 面试每天一篇（第 6 天）	Go 面试每天一篇（第 7 天）	Go 面试每天一篇（第 8 天）
Go 面试每天一篇（第 9 天）	Go 面试每天一篇（第 10 天）	Go 面试每天一篇（第 11 天）</description>
    </item>
    
    <item>
      <title>Go学习中文网资料归集</title>
      <link>https://www.xssor2600.site/post/go%E5%AD%A6%E4%B9%A0%E4%B8%AD%E6%96%87%E7%BD%91%E8%B5%84%E6%96%99%E5%BD%92%E9%9B%86/</link>
      <pubDate>Sat, 11 Jul 2020 17:43:49 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/go%E5%AD%A6%E4%B9%A0%E4%B8%AD%E6%96%87%E7%BD%91%E8%B5%84%E6%96%99%E5%BD%92%E9%9B%86/</guid>
      <description>为了应对太多的目不暇接，散乱的go学习资料。想把golang学习中文网中的资源进行分类归类，后续按照分类来集中学习，提高学习效率。
&amp;lt;每日一库&amp;gt;  Go 每日一库之 mapstructure   &amp;lt;基础内容范围&amp;gt;   [其他基础(Go特性/基础类型)]
Go 中的位运算
Go 的大门已经打开-认识go
Go 语言中的可赋值性
Go 中的等效类型-type
Go 1.11 正式发布：对 Modules 的支持
你所不知道的 Go 语言的一些令人惊叹的优点
For Range 的语义
Golang 中 strings.builder 的 7 个要点
Go 语言之美
Go 语言汇编快速入门
Donng Go 语言的优点，缺点和令人厌恶的设计
Go 语言中的初始化依赖项
Go 语言中的作用域
为什么 Go 类型系统中没可变性
Go 中如何有效的比较字符串
理解 Go 语言的类型
浅析 Go 语言的数字常量
深入理解 fmt 包
图解中文字符编码-Go语言例解
Go 语言中 GOROOT 一定需要设置吗？
Go 创建对象时，如何优雅的传递初始化参数
这个点你有想过吗？Go 语言如何进行类型检查</description>
    </item>
    
    <item>
      <title>redis常用的脚本</title>
      <link>https://www.xssor2600.site/post/common_user_redis_batch_scripts/</link>
      <pubDate>Sat, 04 Jul 2020 13:51:53 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/common_user_redis_batch_scripts/</guid>
      <description>若是想批量启动多个redis服务，或者同时关闭重启多个redis服务，那么通过脚本是最简单的方式。
  Redis批量启动(使用默认配置文件)
#!/bin/bash echo &amp;#34;----- start sentinel redis servers --------&amp;#34; cd /usr/local/redis sudo ./redis-server ./redis.conf sudo ./redis-server ./redis-6378.conf sudo ./redis-server ./redis-6380.conf sudo ./redis-server ./redis-sentinel-26379.conf --sentinel echo &amp;#34;----- sentinel redis servers start successfully! ------&amp;#34;   Redis命令参数化连接
因为配置多个redis实例,每个实例对应不同端口.通过脚本简化redis连接客户端传入的端口参数.
#!/bin/bash echo &amp;#34;---- connection redis client sudo ./redis-cli -p $1------&amp;#34; cd /usr/local/redis # 其中$0 得到命令语句 $1代表命令后的第一个参数 sudo ./redis-cli -p $1 -a x@123456 # 若是每个redis服务密码也不同，则可以使用密码占用符 sudo ./redis-cli -p $1 -a $2 在使用改脚本去连接redis服务器的时候，可以像如下使用：</description>
    </item>
    
    <item>
      <title>关于职场规划的一点感悟</title>
      <link>https://www.xssor2600.site/minds/work_place_fragment_01/</link>
      <pubDate>Fri, 03 Jul 2020 23:25:02 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/minds/work_place_fragment_01/</guid>
      <description>对于一个职场中，脑子主观总是以技术在手，走遍公司都不怕想法驱动的程序员来说，虽然说对技术的最求，持续的学习，能够持续保持的热情都是难能可贵的，但是我不是那1%的扫地僧，没那能力去争抢那稀缺岗位。所以，需要对自己警示，技术并不是全部。
随着职场工作的业务沉淀和公司平台，同事关系等资源的积累，要学会将自己多路拓展思路，将在技术这座难以翻越的大山遮蔽下的眼界，稍微往左右侧时不时也可以考量和尝试一下。当然了，工作中基本的技术职业素养还是不能够丢弃的，持续向优秀方向努力前进。
在技术学习过程中，重点还是得基础扎实，之后的学习策略思考根据自身条件进行指定和调整，业务也是很重要的一项。所以也是需要时常归纳，总结业务。业务是公司资本赚钱最直接的表现,技术只是实现业务的一种方式而已。

学习困境：
​	虽然每天都在想学习，看起来很努力，但是效果极其有限，今天想学数据库，明天想学云计算，后天又想研究&amp;hellip;.在计算机行业技术更新速度太快，不能捡了芝麻丢西瓜。每种技术都在基本表皮面进行hello world，最终的结果都是不能在一个面进行纵向深入，最后伴随年纪增大，将会在行业内失去竞争力。
A:&amp;quot;如果用5年的时间学习xxx,你能不能成为这个领域的专家？&amp;quot; B：&amp;quot;应该可以吧&amp;quot; C：&amp;quot;你现在25，67，5年后才30左右成为某个领域的专家，为什么不去做呢，看看周围多少30岁的人还一事无成，而那个时候，你已经是xxx领域专家了&amp;quot; 突然让自己警醒，不能再像年轻时候的，一味追求新技术，学习表面技术，消耗太多的时间不能在某个领域沉淀下来，也会让自己内心浮躁，焦虑。那么就可以尝试在某一个小的技术面沉淀，主要的时间都丢入到里面吧。</description>
    </item>
    
    <item>
      <title>关于架构学习的一点思考</title>
      <link>https://www.xssor2600.site/minds/some_thoughts_on_arc_learning/</link>
      <pubDate>Tue, 30 Jun 2020 22:30:31 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/minds/some_thoughts_on_arc_learning/</guid>
      <description>为什么会需要架构？
​ 软件架构设计出来的目的就是为了解决软件工程实践过程中带来的复杂度问题。软件架构引入也会带来新的复杂度，即架构不是银弹,不能解决一切问题。
​ 需要根据实际业务来调整架构，业务驱动架构。
  从上而下
架构设计，分类，模式
先从整体上了解主流架构思想，突破从无到有。即为知道有这么个玩意～
之后学习一些架构实践的各种框架设计就能应用架构思想，从而更容易理解框架功能与核心功能。
  从下而上
学习一门新技术，先从大的架构设计去理解，应用什么模式架构去解决了什么问题。
先从理解框架技术的底层原理，在将框架具体架构设计与应用原理对比分析。
   拓展视野，新增感念 框架技术架构印证 代码实现应用场景 了解设计理念便于理解源码模块  </description>
    </item>
    
    <item>
      <title>Mac_iterm2_rz_use</title>
      <link>https://www.xssor2600.site/post/mac_iterm2_rz_use/</link>
      <pubDate>Sun, 28 Jun 2020 23:15:45 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/mac_iterm2_rz_use/</guid>
      <description>有这样的需求：在跳板机器登陆远程服务器后，需要将mysql数据库数据导出到Excel，并将文件下载到本地。
mysql数据导出Excel 在登陆跳板机，ssh连接上服务器后，常规情况通过mysql命令可以直接连接进入数据库。此时我并不需要进入mysql命令行，而是需要在Linux命令行中通过mysql查询命令直接将数据导出到本地文件。
可以通过mysql -e 命令来完成操作：
echo &amp;quot;select uid,\`order\`,money,country_code from user_order_record_new_202006 where create_time &amp;gt;= &#39;2020-06-18 00:00:00&#39; and manner_id = 3 and client = 1 and agree =1&amp;quot; | mysql -h xxxxx -uroot -Ddemo -p&#39;123456&#39; --default-character-set=utf8 &amp;gt; /tmp/ios_recharge_18.xls; 当通过指定的s q l执行完成后，数据将会写入到Excel中，在目录中生成：
  Excel文件下载到本地 在具体服务器生成查询数据文件时候，这时候如何将文件下载到本地？
主要是通过rz/sz来实现两端服务器文件的传输。
 环境: Mac + iterm2终端: 需要在mac中安装lrzsz插件：  brew install lrzsz  Iterm2配置文件发送send,received脚本命令:
具体脚本参照工程: iterm2-zmodem
在目录/usr/local/bin/目录下分别创建脚本iterm2-send-zmodem.sh，iterm2-recv-zmodem.sh：
 iterm2-send-zmodem.sh  #!/bin/bash # Author: Matt Mastracci (matthew@mastracci.com) # AppleScript from http://stackoverflow.</description>
    </item>
    
    <item>
      <title>golang基础知识梳理</title>
      <link>https://www.xssor2600.site/post/golang%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Fri, 26 Jun 2020 23:05:15 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/golang%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>记录一些刚开始学习go的基础内容。
GO的一些特点：
 并行： go让函数很容易成为非常轻量的线程，这些线程在Go中叫做携程。 安全： 当转换一个类型到另外一个类型，需要显示转换并遵循严格的规则。 快速： 编译很快，执行很快。  常量与变量 const limit = 512 const top uint16 = 1421 const x,y int = 1,3 var a int var b string var c float64 var d [5] int //数组 var e [] int //数组切片 var f * int //正确 var v1 int = 5 //正确 var v2 = 5 //正确，编译器自动推导出V2类型 v3 := 5 //正确，编译器自动推导出V3的类型 基础数据类型 const limit = 512 const top uint16 = 1421 const x,y int = 1,3 var a int var b string var c float64 var d [5] int //数组 var e [] int //数组切片 var f * int //正确 var v1 int = 5 //正确 var v2 = 5 //正确，编译器自动推导出V2类型 v3 := 5 //正确，编译器自动推导出V3的类型  // 两种浮点类型和两种复数类型 float32	±3.</description>
    </item>
    
    <item>
      <title>如何使用hugo来编写文章</title>
      <link>https://www.xssor2600.site/post/how_to_use_hugo/</link>
      <pubDate>Tue, 23 Jun 2020 23:05:15 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/post/how_to_use_hugo/</guid>
      <description>创建文章  创建一个about页面 创建的about页面会自动生成到content/about.md. 创建第一篇文章，放置post目录下 若是平时想要生成文章，则通过下面命令来创建文章:  hugo new post/new_page_name.md 安装皮肤 在皮肤列表hugo皮肤列表中找到喜欢的主题，并通过git clone到themes目录下，在启动的时候，可以指定名录。
$ cd themes $ git clone https://github.com/spf13/hyde.git 运行hugo 在site的根路径执行hugo启动服务器命令:
hugo server --theme=hyde --buildDrafts // or hugo server -w 在命令行看到启动后，本地可以通过地址http://localhost:1313打开即可。
github部署 首先需要在站点根路径下，通过一下命令来生成静态页面:
hugo --theme=hyde --baseUrl=&amp;quot;https://xssor2600.github.io/&amp;quot; 然后进入public目录，提交代码到GitHub即可
cd public git add -A git commit -m &amp;quot;first commit&amp;quot; git push -u origin master 文章编写  添加标签tag 若是想对文章添加一些标签，那么可以按照如下方式在文章创建开头使用tags属性：  tags: [ &amp;quot;tag1&amp;quot;, &amp;quot;tag2&amp;quot;, &amp;quot;tag3&amp;quot; ] </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.xssor2600.site/about/</link>
      <pubDate>Tue, 23 Jun 2020 23:03:25 +0800</pubDate>
      
      <guid>https://www.xssor2600.site/about/</guid>
      <description>This is me, who is trying to learn more !</description>
    </item>
    
  </channel>
</rss>